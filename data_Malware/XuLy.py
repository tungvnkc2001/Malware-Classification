import pickle
import pefile
import os
import pandas as pd
import joblib
import numpy
import sklearn.ensemble as ek
from sklearn.model_selection import train_test_split
from sklearn import tree, linear_model
from sklearn.feature_selection import SelectFromModel
from sklearn.naive_bayes import GaussianNB
from sklearn.metrics import confusion_matrix
from sklearn.pipeline import make_pipeline
from sklearn import preprocessing
from sklearn import svm
from sklearn.linear_model import LinearRegression

from info_File import extract_infos


from tkinter import Tk, filedialog
from tkinter import messagebox


def handleClassifier():
    dataset = pd.read_csv(r"data.csv", sep = '|')
    dataset.groupby(dataset['Safe']).size()

    print(dataset)
    X = dataset.drop(['Name','md5','Safe'],axis=1).values
    y = dataset['Safe'].values

    
    extratrees = ek.ExtraTreesClassifier().fit(X, y)
    model = SelectFromModel(extratrees, prefit = True)
    new_X = model.transform(X)

    listFeatures = new_X.shape[1]

    X_train, X_test, y_train, y_test = train_test_split(new_X, y ,test_size=0.2)

    features = []
    index = numpy.argsort(extratrees.feature_importances_)[::-1][:listFeatures]

    for f in range(listFeatures):
        features.append(dataset.columns[2+f])
    
    model = { "DecisionTree":tree.DecisionTreeClassifier(max_depth=10),
             "RandomForest":ek.RandomForestClassifier(n_estimators=50),
             "Adaboost":ek.AdaBoostClassifier(n_estimators=50),
             "GradientBoosting":ek.GradientBoostingClassifier(n_estimators=50),
             "GNB":GaussianNB(),
             "LinearRegression":LinearRegression()   
    }



    results = {}
    for algo in model:
        clf = model[algo]
        clf.fit(X_train,y_train)
        score = clf.score(X_test,y_test)
        results[algo] = score


    winner = max(results, key=results.get)

    joblib.dump(model[winner],'classifier/classifier.pkl')
    open('classifier/features.pkl', 'wb').write(pickle.dumps(features))

    clf = model[winner]
    res = clf.predict(new_X)
    mt = confusion_matrix(y, res)





def ScanVirus(path):
    #print(path)
    try:
        path = path.replace("/", "\\")
        clf = joblib.load('classifier/classifier.pkl')
        features = pickle.loads(open(os.path.join('classifier/features.pkl'),'rb').read())
        data = extract_infos(path)
        pe_features = list(map(lambda x:data[x], features))

        res= clf.predict([pe_features])[0]    
        
        return res
    except Exception as exc:
        #print("Exception: ", exc)
        return 2



def QuetTrenFolder(folderPath, nameList, response):
    for file in os.listdir(folderPath):
        if(os.path.isdir(os.path.join(folderPath, file))):            
            QuetTrenFolder(os.path.join(folderPath, file), nameList, response)
        else:
            print(os.path.join(folderPath, file))
            nameList.append(os.path.join(folderPath, file))
            response.append(ScanVirus(os.path.join(folderPath, file)))
            #if result == 1:
            #    messagebox.showinfo("SAFE!", "FILE " + file +" an toàn")
            #elif result == 0:
            #    messagebox.showinfo("WARNING!!!!", "FILE " + file +" khả nghi có thể là mã độc")
            #else:
            #    messagebox.showinfo("ERROR", "File " + file +" có thể không phải định dạng PE hoặc đã bị Pack, hãy unpack trước")





def makeDataCSV():

    dataset=pd.read_csv(r'data.csv',sep='|')
    dataset.groupby(dataset['Safe']).size()


    pe_dataset = dataset[[  'Machine',
                            'SizeOfOptionalHeader',
                            'Characteristics',
                            'MajorLinkerVersion',
                            'MinorLinkerVersion',
                            'SizeOfCode',
                            'SizeOfInitializedData',
                            'SizeOfUninitializedData',
                            'AddressOfEntryPoint',
                            'BaseOfCode',
                            'BaseOfData',
                            'ImageBase',
                            'SectionAlignment',
                            'FileAlignment',
                            'MajorOperatingSystemVersion',
                            'Safe']]

    pe_dataset.to_csv("final_data.csv",sep = "|", index = False)

