import pickle
import pefile
import os
import pandas as pd
import joblib
import numpy
import sklearn.ensemble as ek
from sklearn.model_selection import train_test_split
from sklearn import tree, linear_model
from sklearn.feature_selection import SelectFromModel
from sklearn.naive_bayes import GaussianNB
from sklearn.metrics import confusion_matrix
from sklearn.pipeline import make_pipeline
from sklearn import preprocessing
from sklearn import svm
from sklearn.linear_model import LinearRegression

from info_File import extract_infos

def handleClassifier():
    dataset = pd.read_csv(r"data.csv", sep = '|')
    dataset.groupby(dataset['Safe']).size()
    X = dataset.drop(["Name", "MD5", "DLL", "Type", "Path", "Safe", "Pack", "Label"], axis = 1).values


    y = dataset['Safe'].values


    extratrees = ek.ExtraTreesClassifier().fit(X, y)
    model = SelectFromModel(extratrees, prefit = True)
    new_X = model.transform(X)

    listFeatures = new_X.shape[1]

    #print(listFeatures) #55

    X_train, X_test, y_train, y_test = train_test_split(new_X, y ,test_size=0.2)

    features = []
    index = numpy.argsort(extratrees.feature_importances_)[::-1][:listFeatures]

    for f in range(listFeatures):
        features.append(dataset.columns[2+f])




    model = { "DecisionTree":tree.DecisionTreeClassifier(max_depth=10),
             "RandomForest":ek.RandomForestClassifier(n_estimators=50),
             "Adaboost":ek.AdaBoostClassifier(n_estimators=50),
             "GradientBoosting":ek.GradientBoostingClassifier(n_estimators=50),
             "GNB":GaussianNB(),
             "LinearRegression":LinearRegression()   
    }



    results = {}
    for algo in model:
        clf = model[algo]
        clf.fit(X_train,y_train)
        score = clf.score(X_test,y_test)
        results[algo] = score


    winner = max(results, key=results.get)

    f = open("classifier/classifier.pkl", "wb")
    f.close()

    joblib.dump(model[winner],'classifier/classifier.pkl')
    open('classifier/features.pkl', 'wb').write(pickle.dumps(features))

    clf = joblib.load('classifier/classifier.pkl')

def ScanVirus(path):
    clf = joblib.load('classifier/classifier.pkl')
    features = pickle.loads(open(os.path.join('classifier/features.pkl'),'rb').read())

    data = extract_infos(path)
    pe_features = list(map(lambda x:data[x], features))


#def scanVirus(path):
